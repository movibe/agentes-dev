{
    "project_context": "This is a system for registering project templates, allowing users to select different code editors and technologies for creating custom agents.",
    "coding_standards": {
        "language": "TypeScript",
        "framework": "Next.js",
        "styling": "Tailwind CSS",
        "state_management": "Zustand",
        "data_fetching": "React Query",
        "conventions": {
            "components": "Use functional components with hooks.",
            "variables": "Use camelCase naming.",
            "components_names": "Use PascalCase naming."
        }
    },
    "preferred_libraries": {
        "routing": "Next.js default routing.",
        "forms": "React Hook Form for form handling.",
        "icons": "Heroicons for icons."
    },
    "file_structure": {
        "components": "src/components - Reusable interface components.",
        "pages": "src/pages - Main application pages.",
        "styles": "src/styles - Styling files.",
        "store": "src/store - State management with Zustand.",
        "services": "src/services - Functions for backend communication."
    },
    "performance_guidelines": {
        "code_splitting": "Implement dynamic loading for heavy components.",
        "memoization": "Use React.memo and useMemo for optimization.",
        "data_fetching": "Manage data cache with React Query."
    },
    "testing_requirements": {
        "framework": "Jest with React Testing Library.",
        "coverage": "Aim for 90% test coverage.",
        "types": "Include unit and integration tests."
    },
    "documentation_guidelines": {
        "comments": "Add JSDoc comments to all functions and components.",
        "readme": "Keep README.md updated with usage and development instructions.",
        "changelog": "Record significant changes in CHANGELOG.md."
    },
    "error_handling": {
        "frontend": "Implement error boundaries to catch exceptions in components.",
        "backend": "Handle API errors with user-friendly messages.",
        "logging": "Integrate monitoring service for error logging (e.g., Sentry)."
    },
    "language_preference": "English",
    "response_style": "Objective, detailed and with humor",
    "documentation": {
        "enabled": true,
        "format": "Markdown",
        "location": "docs",
        "frequency": "At each completed stage",
        "language": "English"
    }
}