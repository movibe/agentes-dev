{
    "project_context": "Este é um sistema para cadastro de templates de projetos, permitindo que os usuários selecionem diferentes editores de código e tecnologias para a criação de agentes personalizados.",
    "coding_standards": {
        "language": "TypeScript",
        "framework": "Next.js",
        "styling": "Tailwind CSS",
        "state_management": "Zustand",
        "data_fetching": "React Query",
        "conventions": {
            "components": "Utilizar componentes funcionais com hooks.",
            "variables": "Nomenclatura em camelCase.",
            "components_names": "Nomenclatura em PascalCase."
        }
    },
    "preferred_libraries": {
        "routing": "Next.js roteamento padrão.",
        "forms": "React Hook Form para manipulação de formulários.",
        "icons": "Heroicons para ícones."
    },
    "file_structure": {
        "components": "src/components - Componentes reutilizáveis da interface.",
        "pages": "src/pages - Páginas principais do aplicativo.",
        "styles": "src/styles - Arquivos de estilização.",
        "store": "src/store - Gerenciamento de estado com Zustand.",
        "services": "src/services - Funções para comunicação com o backend."
    },
    "performance_guidelines": {
        "code_splitting": "Implementar carregamento dinâmico para componentes pesados.",
        "memoization": "Utilizar React.memo e useMemo para otimização.",
        "data_fetching": "Gerenciar cache de dados com React Query."
    },
    "testing_requirements": {
        "framework": "Jest com React Testing Library.",
        "coverage": "Almejar 90% de cobertura de testes.",
        "types": "Incluir testes unitários e de integração."
    },
    "documentation_guidelines": {
        "comments": "Adicionar comentários JSDoc em todas as funções e componentes.",
        "readme": "Manter o README.md atualizado com instruções de uso e desenvolvimento.",
        "changelog": "Registrar mudanças significativas no CHANGELOG.md."
    },
    "error_handling": {
        "frontend": "Implementar boundaries de erro para capturar exceções em componentes.",
        "backend": "Tratar erros de API com mensagens amigáveis ao usuário.",
        "logging": "Integrar serviço de monitoramento para registro de erros (ex: Sentry)."
    },
    "language_preference": "Português",
    "response_style": "Objetivo, detalhado e com humor",
    "documentation": {
        "enabled": true,
        "format": "Markdown",
        "location": "docs",
        "frequency": "A cada etapa concluída"
    }
}